********************************
* How to use matrix_divided.py *
********************************

Function called 'My name is()'

*****************
* Import module *
*****************

>>> say_my_name = __import__('3-say_my_name').say_my_name


******************
* Initialization *
******************



**********
* Return *
**********
nothing if it is not a string


**************************
* Basic cases on success *
**************************


>>> say_my_name("Fernandez", "JOSE")
My name is Fernandez JOSE

>>> say_my_name("Fernandez")
My name is Fernandez 

>>> say_my_name(str(456), str(789))
My name is 456 789

******************
* Cases of Error *
******************

>>> say_my_name("Fernandez", 123)
Traceback (most recent call last):
TypeError: last_name must be a string

>>> say_my_name(int("Josef"), "Fernandez")
Traceback (most recent call last):
ValueError: invalid literal for int() with base 10: 'Josef'

>>> say_my_name(123, "JOSE")
Traceback (most recent call last):
TypeError: first_name must be a string

>>> say_my_name(float("NaN"), "Fernandez")
Traceback (most recent call last):
TypeError: first_name must be a string

>>> say_my_name(None, None)
Traceback (most recent call last):
TypeError: first_name must be a string

>>> say_my_name([50, 2])
Traceback (most recent call last):
TypeError: first_name must be a string
